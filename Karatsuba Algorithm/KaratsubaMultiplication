# -*- coding: utf-8 -*-
"""
Created on Thu Jan 31 06:44:56 2019

@author: Yuvraj
"""
# This is program for Karatsuba Algorithm
# This is a more generalized in term of base
# This program will multiply any two n digits number with any base using Karatsuba Algorithm

# noOfDigits() will return number of digits in a number: n with base: base
# Ex:
# base = 25
# n = 19*(25**6) + 20*(25**4) + 4*(25**3) + 2*25 + 10
# base 10 representation of n: 4646546935
# n contain 7 digits in base 25
# noOfDigits(n,base)    # it will output: 7
def noOfDigits(n,base):
    if(base == 1):
        return -1
    temp = n
    count = 0
    while temp > 0:
        temp //= base
        count += 1
    return count

# n: is the number to split
# exp: this is the number of digits that the lower half of the number contain
# Ex: Say n=123456, base=10, exp=3
# so n will split like (123, 456)
# lower half 456 contain 3(exp) digits
def stripDigit(n,exp,base): # n: number, nd: no of digits in n, base is base of number n
    upper, lower = 0, 0
    for i in range(exp):
        lastDigit = n % base
        n = n // base
        lower += (base**i)*lastDigit
    i = 0
    while(n>0):
        lastDigit = n % base
        n = n // base
        upper += (base**i)*lastDigit
        i += 1
    return upper, lower

def max(a,b):
    if(a>b):    return a
    return b


# x = x1*base^(x_digits) + x0  ; b: base of x, x1: upper half of x, x0: lower half of x, x_digits: no of digits in x (in base b)
# y = y1*base^(y_digits) + y0  ; b: base of y, y1: upper half of y, y0: lower half of y, y_digits: no of digits in y (in base b)
# Here x0 and y0 must have the same no. of digits so that when we multiply x and y
#     x*y = x1*y1*(base^(x0_digits + y0_digits)) +   [  x1*y0*(base^x0_digits) + x0*y1*(base^y0_digits)  ]  + x0*y0 
# (to make Karatsuba work we need no of gigits in x0 must be equall to no of digits in y0) x0_digits = y0_digits = digits
#  => x*y = x*y = x1*y1*(base^(x0_digits + y0_digits)) + x0*y0 +  (x1*y0 + x0*y1)*(base^digits)
# Naive Approch: z0 = x0*y0 , z2 = x1*y1 , z1 = (x1*y0 + x0*y1) 
#                z = z2*(base^2*digits) + z1*(base^digits) + z0         ; it require: x0_digits = y0_digits (say = digits)
# It require 4 Multipliaction
    
# Karatsuba: z1 = x0*y1 + x1*y0 = (x0 + x1)*(y0 + y1) - x1*y1 - x0*y0
#                               = (x0 + x1)*(y0 + y1) - z2 - z0
# z0 = x0*y0 , z2 = x1*y1 , z1 = (x0 + x1)*(y0 + y1) - z2 - z0
# z = x*y = z2*(base^2*digits) + z1*(base^digits) + z0
# Karatsuba reduces from 4 multipication to 3 multipication 
def karatsubaMultiplication(x,y,base=10):
    if(x.bit_length() <= 64 and y.bit_length() <=64):
        return x*y
    # x_digits is the no of digits in x and y_digits is the no of digits in y
    x_digits, y_digits = noOfDigits(x,base), noOfDigits(y,base)       # O(N), O(N)
    exp = max(x_digits,y_digits)//2
    x1,x0 = stripDigit(x,exp,base)                                    # O(N)
    y1,y0 = stripDigit(y,exp,base)                                    # O(N)
    z2 = karatsubaMultiplication(x1,y1,base)                          # recursion w/ reduced size by half T(N/2)
    z0 = karatsubaMultiplication(x0,y0,base)                          # recursion w/ reduced size by half T(N/2)
    z1 = karatsubaMultiplication((x0 + x1),(y0+y1),base) - z0 - z2    # recursion w/ reduced size by half T(N/2)
    return z2*(base**(2*exp)) + z1*(base**(exp)) + z0


# It will return list containing digits of the number n whose base can be any base
def getDigits(n,base=10):
    l = []
    while(n>0):
        lastdigit = n % base
        n = n//base
        l.append(lastdigit)
    l.reverse()
    return l

# This is an example to show how to use karatsuba()
x = 1<<1024
y = 1<<2048
ans = karatsubaMultiplication(x,y)  # 3rd argument is the base of a number
                                    # is we don't give 3rd argument it will take it 10
print(ans)
print()

# Now take example of another base
# Let x is our no with base 25
# It's a 7 digit number
# whose 1st digit: 19, 2nd digit: 0, 3rd digit: 20, 4th digit: 4
# 5th digit: 0, 6th digit: 2 and 7th digit: 10
# Now Let y is another no with base 25
# It's also a 7 digit number
# whose 1st digit: 6, 2nd digit: 11, 3rd digit: 9, 4th digit: 0
# 5th digit: 19, 6th digit: 22 and 7th digit: 5
x = 19*(25**6) + 0*(25**5) + 20*(25**4) + 4*(25**3) + 0*(25**2) + 2*(25**1) + 10*(25**0)
y = 6*(25**6) + 11*(25**5) + 9*(25**4) + 0*(25**3) + 19*(25**2) + 22*(25**1) + 5*(25**0)
base = 25
ans = karatsubaMultiplication(x,y,base)     # It will return a base 10 representation of answer
print("This is base 10 representation of ans of x*y:",ans)
# And if you want digits of the answer in base 25 the use getDigits()
# It will return list containing digits of the answer whose base is say 25
l = getDigits(ans,base)
print("Digits Of x*y in base:",base," is:",l)


#t = compare(100,10)
#check(2000,10)
